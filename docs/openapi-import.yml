openapi: 3.0.3

info:
  title: ODP REST API / Import
  description: Document extraction, mapping, and structured data import operations
  version: 1.0.0

paths:
  /import/extract/word:
    post:
      summary: Extract raw data from Word document
      description: Parse Word document structure into generic intermediate representation
      tags: [Import]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Word document (.docx)
              required:
                - file
      responses:
        '200':
          description: Successfully extracted raw data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawExtractedData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'

  /import/extract/word-hierarchy:
    post:
      summary: Extract raw data from hierarchical Word documents (ZIP)
      description: Parse ZIP file containing folder structure with Word documents into organizational hierarchy
      tags: [Import]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: ZIP file with folder/docx hierarchy
              required:
                - file
      responses:
        '200':
          description: Successfully extracted hierarchical raw data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawExtractedData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'

  /import/extract/excel:
    post:
      summary: Extract raw data from Excel document
      description: Parse Excel workbook structure into generic intermediate representation
      tags: [Import]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel document (.xlsx)
              required:
                - file
      responses:
        '200':
          description: Successfully extracted raw data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawExtractedData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'

  /import/map/{drg}:
    post:
      summary: Map raw extracted data to structured import format
      description: |
        Apply business rules to transform raw data into structured entities.
        
        Two mapping modes:
        - Standard format (default): For round-trip editing of exported .docx files.
          Uses table-based entity format with Code field for identity preservation.
        - DrG-specific format: For original source documents using specialized mappers
          tailored to each DrG's unique document structure and conventions.
      tags: [Import]
      parameters:
        - name: drg
          in: path
          required: true
          schema:
            type: string
            enum: [4DT, AIRPORT, ASM_ATFCM, CRISIS_FAAS, FLOW, IDL, NM_B2B, NMUI, PERF, RRT, TCF]
          description: Drafting group identifier
        - name: specific
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            Use DrG-specific mapper for original source documents.
            
            When false (default): Uses StandardMapper for round-trip editing workflow.
            Processes exported .docx files with standardized table-based entity format.
            
            When true: Uses specialized mapper from MapperRegistry (e.g., NM_B2B_Mapper,
            AirportMapper, ReroutingMapper) for importing original DrG source materials.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawExtractedData'
      responses:
        '200':
          description: Successfully mapped to structured data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredImportData'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '404':
          description: Unknown DrG or mapper not found
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'

  /import/structured:
    post:
      summary: Import structured data into database
      description: |
        Validate and persist structured entities with reference resolution.
        
        Two import modes:
        - Standard mode (default): Uses StandardImporter for round-trip editing workflow.
          Entities identified by code field, supports CREATE/UPDATE/SKIP logic with
          comparison-based change detection.
        - DrG-specific mode: Uses JSONImporter for initial DrG material import.
          Entities identified by externalId field, creates all entities as new.
      tags: [Import]
      parameters:
        - name: specific
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: |
            Use JSONImporter for DrG-specific initial material import (externalId-based).
            
            When false (default): Uses StandardImporter for round-trip editing workflow.
            Entities use code field for identity, enables CREATE/UPDATE/SKIP based on comparison.
            
            When true: Uses JSONImporter for initial import of DrG source materials.
            Entities use externalId field and are created as new entries.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredImportData'
      responses:
        '200':
          description: Import completed with summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSummary'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: 'openapi-base.yml#/components/schemas/Error'

components:
  schemas:
    ImportSummary:
      type: object
      properties:
        documents: { type: integer }
        stakeholderCategories: { type: integer }
        dataCategories: { type: integer }
        services: { type: integer }
        waves: { type: integer }
        requirements: { type: integer }
        changes: { type: integer }
        errors:
          type: array
          items: { type: string }

    RawExtractedData:
      type: object
      description: Generic intermediate representation of extracted document structure
      properties:
        documentType:
          type: string
          enum: [word, excel, hierarchical-word]
        metadata:
          type: object
          properties:
            filename:
              type: string
            parsedAt:
              type: string
              format: date-time
            zipEntryCount:
              type: integer
              description: Number of files in ZIP (for hierarchical-word only)
          additionalProperties: true
        sections:
          type: array
          description: Hierarchical sections (for Word documents)
          items:
            $ref: '#/components/schemas/Section'
        sheets:
          type: array
          description: Spreadsheet sheets (for Excel documents)
          items:
            $ref: '#/components/schemas/Sheet'
      required:
        - documentType
        - metadata

    Section:
      type: object
      description: Hierarchical section from Word document
      properties:
        level:
          type: integer
          description: Heading level (1-6)
        title:
          type: string
        path:
          type: array
          items:
            type: string
          description: Full path from root to this section
        isOrganizational:
          type: boolean
          description: True if section represents a folder (hierarchical-word only), false if from document content
        content:
          type: object
          properties:
            paragraphs:
              type: array
              items:
                type: string
            tables:
              type: array
              items:
                type: object
                additionalProperties: true
            lists:
              type: array
              items:
                type: object
                additionalProperties: true
            images:
              type: array
              items:
                type: object
                properties:
                  contentType:
                    type: string
                  data:
                    type: string
                  encoding:
                    type: string
          additionalProperties: true
        subsections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
      required:
        - level
        - title
        - path

    Sheet:
      type: object
      description: Spreadsheet sheet from Excel workbook
      properties:
        name:
          type: string
        rows:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Array of row objects with column headers as keys
        metadata:
          type: object
          additionalProperties: true
      required:
        - name
        - rows

    StructuredImportData:
      type: object
      description: Structured entities ready for database import
      properties:
        documents:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/DocumentRequest'
        stakeholderCategories:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/StakeholderCategoryRequest'
        dataCategories:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/DataCategoryRequest'
        services:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/ServiceRequest'
        waves:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/WaveRequest'
        requirements:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/OperationalRequirementRequest'
        changes:
          type: array
          items:
            $ref: 'openapi-base.yml#/components/schemas/OperationalChangeRequest'