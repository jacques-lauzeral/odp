openapi: 3.0.3
info:
  title: ODP REST API
  description: Operational Deployment Plan Management API
  version: 1.0.0
  contact:
    name: ODP Development Team

servers:
  - url: http://localhost
    description: Development server

security:
  - UserContext: []

components:
  securitySchemes:
    UserContext:
      type: apiKey
      in: header
      name: x-user-id
      description: User identifier for audit context

  schemas:
    # Error Responses
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              enum: [BAD_REQUEST, VALIDATION_ERROR, NOT_FOUND, VERSION_CONFLICT, CONFLICT, INTERNAL_ERROR]
            message:
              type: string

    # Setup Entities (Simple)
    StakeholderCategory:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    StakeholderCategoryRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          nullable: true

    DataCategory:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    DataCategoryRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          nullable: true

    Service:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    ServiceRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          nullable: true

    RegulatoryAspect:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string

    RegulatoryAspectRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        parentId:
          type: string
          nullable: true

    # Reference Objects (for operational entity outputs)
    EntityReference:
      type: object
      properties:
        id:
          type: string
        title:
          type: string

    OperationalRequirementReference:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        type:
          type: string
          enum: [ON, OR]

    # Operational Entities (Versioned)
    OperationalRequirement:
      type: object
      properties:
        itemId:
          type: string
        title:
          type: string
        versionId:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        type:
          type: string
          enum: [ON, OR]
        statement:
          type: string
        rationale:
          type: string
        references:
          type: string
        risksAndOpportunities:
          type: string
        flows:
          type: string
        flowExamples:
          type: string
        refinesParents:
          type: array
          items:
            $ref: '#/components/schemas/OperationalRequirementReference'
        impactsStakeholderCategories:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        impactsData:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        impactsServices:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
        impactsRegulatoryAspects:
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'

    OperationalRequirementRequest:
      type: object
      required: [title, type, statement, rationale, references, risksAndOpportunities, flows, flowExamples, refinesParents, impactsStakeholderCategories, impactsData, impactsServices, impactsRegulatoryAspects]
      properties:
        title:
          type: string
        type:
          type: string
          enum: [ON, OR]
        statement:
          type: string
        rationale:
          type: string
        references:
          type: string
        risksAndOpportunities:
          type: string
        flows:
          type: string
        flowExamples:
          type: string
        refinesParents:
          type: array
          items:
            type: string
        impactsStakeholderCategories:
          type: array
          items:
            type: string
        impactsData:
          type: array
          items:
            type: string
        impactsServices:
          type: array
          items:
            type: string
        impactsRegulatoryAspects:
          type: array
          items:
            type: string

    OperationalRequirementUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/OperationalRequirementRequest'
        - type: object
          required: [expectedVersionId]
          properties:
            expectedVersionId:
              type: string

    Milestone:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        eventTypes:
          type: array
          items:
            type: string
            enum: [API_PUBLICATION, API_TEST_DEPLOYMENT, UI_TEST_DEPLOYMENT, SERVICE_ACTIVATION, API_DECOMMISSIONING, OTHER]
        wave:
          type: object
          nullable: true
          properties:
            id:
              type: string
            title:
              type: string
            year:
              type: integer
            quarter:
              type: integer
            date:
              type: string

    MilestoneRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        eventTypes:
          type: array
          items:
            type: string
            enum: [API_PUBLICATION, API_TEST_DEPLOYMENT, UI_TEST_DEPLOYMENT, SERVICE_ACTIVATION, API_DECOMMISSIONING, OTHER]
        waveId:
          type: string
          nullable: true

    OperationalChange:
      type: object
      properties:
        itemId:
          type: string
        title:
          type: string
        versionId:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        description:
          type: string
        visibility:
          type: string
          enum: [NM, NETWORK]
        satisfiesRequirements:
          type: array
          items:
            $ref: '#/components/schemas/OperationalRequirementReference'
        supersedsRequirements:
          type: array
          items:
            $ref: '#/components/schemas/OperationalRequirementReference'
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/Milestone'

    OperationalChangeRequest:
      type: object
      required: [title, description, visibility, satisfiesRequirements, supersedsRequirements, milestones]
      properties:
        title:
          type: string
        description:
          type: string
        visibility:
          type: string
          enum: [NM, NETWORK]
        satisfiesRequirements:
          type: array
          items:
            type: string
        supersedsRequirements:
          type: array
          items:
            type: string
        milestones:
          type: array
          items:
            $ref: '#/components/schemas/MilestoneRequest'

    OperationalChangeUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/OperationalChangeRequest'
        - type: object
          required: [expectedVersionId]
          properties:
            expectedVersionId:
              type: string

    VersionHistory:
      type: object
      properties:
        versionId:
          type: string
        version:
          type: integer
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string

paths:
  # Stakeholder Category Endpoints
  /stakeholder-categories:
    get:
      summary: List all stakeholder categories
      tags: [Stakeholder Categories]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakeholderCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create new stakeholder category
      tags: [Stakeholder Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StakeholderCategoryRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakeholderCategory'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /stakeholder-categories/{id}:
    get:
      summary: Get stakeholder category by ID
      tags: [Stakeholder Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakeholderCategory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update stakeholder category
      tags: [Stakeholder Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StakeholderCategoryRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakeholderCategory'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete stakeholder category
      tags: [Stakeholder Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - has child entities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Data Category Endpoints
  /data-categories:
    get:
      summary: List all data categories
      tags: [Data Categories]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataCategory'

    post:
      summary: Create new data category
      tags: [Data Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataCategoryRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCategory'

  /data-categories/{id}:
    get:
      summary: Get data category by ID
      tags: [Data Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCategory'

    put:
      summary: Update data category
      tags: [Data Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataCategoryRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataCategory'

    delete:
      summary: Delete data category
      tags: [Data Categories]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  # Service Endpoints
  /services:
    get:
      summary: List all services
      tags: [Services]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

    post:
      summary: Create new service
      tags: [Services]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /services/{id}:
    get:
      summary: Get service by ID
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

    put:
      summary: Update service
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

    delete:
      summary: Delete service
      tags: [Services]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  # Regulatory Aspect Endpoints
  /regulatory-aspects:
    get:
      summary: List all regulatory aspects
      tags: [Regulatory Aspects]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegulatoryAspect'

    post:
      summary: Create new regulatory aspect
      tags: [Regulatory Aspects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegulatoryAspectRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryAspect'

  /regulatory-aspects/{id}:
    get:
      summary: Get regulatory aspect by ID
      tags: [Regulatory Aspects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryAspect'

    put:
      summary: Update regulatory aspect
      tags: [Regulatory Aspects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegulatoryAspectRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegulatoryAspect'

    delete:
      summary: Delete regulatory aspect
      tags: [Regulatory Aspects]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  # Operational Requirement Endpoints
  /operational-requirements:
    get:
      summary: List all operational requirements (latest versions)
      tags: [Operational Requirements]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationalRequirement'

    post:
      summary: Create new operational requirement
      tags: [Operational Requirements]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationalRequirementRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalRequirement'
        '400':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /operational-requirements/{id}:
    get:
      summary: Get operational requirement by ID (latest version)
      tags: [Operational Requirements]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalRequirement'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update operational requirement (creates new version)
      tags: [Operational Requirements]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationalRequirementUpdateRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalRequirement'
        '409':
          description: Version Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete operational requirement (all versions)
      tags: [Operational Requirements]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /operational-requirements/{id}/versions:
    get:
      summary: Get version history for operational requirement
      tags: [Operational Requirements]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionHistory'

  /operational-requirements/{id}/versions/{versionNumber}:
    get:
      summary: Get specific version of operational requirement
      tags: [Operational Requirements]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: versionNumber
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalRequirement'

  # Operational Change Endpoints
  /operational-changes:
    get:
      summary: List all operational changes (latest versions)
      tags: [Operational Changes]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationalChange'

    post:
      summary: Create new operational change
      tags: [Operational Changes]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationalChangeRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalChange'

  /operational-changes/{id}:
    get:
      summary: Get operational change by ID (latest version)
      tags: [Operational Changes]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalChange'

    put:
      summary: Update operational change (creates new version)
      tags: [Operational Changes]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationalChangeUpdateRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalChange'

    delete:
      summary: Delete operational change (all versions)
      tags: [Operational Changes]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /operational-changes/{id}/versions:
    get:
      summary: Get version history for operational change
      tags: [Operational Changes]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VersionHistory'

  /operational-changes/{id}/versions/{versionNumber}:
    get:
      summary: Get specific version of operational change
      tags: [Operational Changes]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: versionNumber
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationalChange'

tags:
  - name: Stakeholder Categories
    description: Stakeholder category management
  - name: Data Categories
    description: Data category management
  - name: Services
    description: Service management
  - name: Regulatory Aspects
    description: Regulatory aspect management
  - name: Operational Requirements
    description: Operational requirement management with versioning
  - name: Operational Changes
    description: Operational change management with versioning